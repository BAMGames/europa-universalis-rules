%!PS
/globalscale 72 180 div def
/pagewidth 8425 def % default values
/pageheight 5840 def % default values
/traces BASEDIR (rotw) ! TARGET eq def

(library/library.ps) include
(library/libcarte.ps) include

% map clipping settings
0 0 8425 5840 bboxset
%5000 2000 7000 3000 bboxset
/pagewidth MAXx MINx sub def
/pageheight MAXy MINy sub def

% Images & Fonts
BASEDIR(images.ps)! include
FONTDIR(champion.ps)! include

/xfact 40955 3500 sub 8425 0 sub div def
/yfact 29465 3500 sub 5840 0 sub div def
/xbase 3500 0 xfact mul sub .5 add def
/ybase 3500 0 yfact mul sub .5 add def
(RotwSource) inittrace

<< /Title ((ROTW Map for EU9)) >> infochunk

begindocument
beginpage
true {
    (0 0 )out pagewidth display space pageheight display ( re W n 1 0 0 1 )out
    MINx neg display space MINy neg display ( cm\n)out
    TARGET(.background.clp)! copymap
} if % include background
true {
    (img:orage6) 0240 3040 (Mer d’Alaska) true orage
    (img:orage5) 0430 2800 (Golfe de Californie) false orage
    (img:orage7) 0366 2150 (Pacifique nord-est) true orage
    1 risque
    (img:orage8) 0366 1835 (Pacifique sud-est) true orage
    1 risque
    ((for memory)) 1444 0022 300 28(FontArialNarrow-Bold) centertextbbox
    (img:orage8) 1390 0050 (Pacifique sud-est) true orage
    1 risque
    (img:orage6) 1181 1861 (Golfe de Panama) true orage
    (img:orage5) 1702 0623 (Côte du Pérou) true orage
    (img:orage5) 1636 0197 (Côte du Chili) true orage
    (img:orage8) 1842 0014 (Cap Horn) true orage
    2 risque
    (img:orage6) 2387 0359 (Côte de Patagonie) true orage
    (img:orage4) 2695 0750 (Rio de la Plata) false orage
    (img:orage4) 2860 0851 (Mer de Bahia) true orage
    (img:orage5) 2964 1187 (Mer de Recife) true orage
    (img:orage6) 2935 1935 (Atlantique équatorial) false orage
    (img:orage5) 2696 1645 (Golfe d’Amazonie) true orage
    (img:orage6) 2546 2229 (Îles sous-le-vent) false orage
    (img:orage6) 2150 1965 (Caraïbes) false orage
    (img:orage6) 1490 2240 (Golfe du Mexique) false orage
    (img:orage6) 1992 2206 (Cuba) true orage
    (img:orage6) 2254 2244 (Puerto Rico) false orage
    (img:orage7) 2386 2472 (Triangle des Bermudes) false orage
    (img:orage5) 2355 2716 (Atlantique nord-ouest) true orage
    (img:orage6) 2338 3354 (Mer du Labrador) false orage
    (img:orage6) 1638 3265 (Baie d’Hudson) true orage
    2 risque
    (img:orage5) 2964 3228 (Grœnland) false orage
    (img:orage6) 3230 2780 (Mer des Açores) false orage
    (img:orage5) 3293 2507 (Mer des Canaries) true orage
    (img:orage6) 2735 2660 (Atlantique nord) false orage
    (img:orage6) 2735 2380 (Atlantique) false orage
    (img:orage5) 3260 2130 (Banc d’Arguin) true orage
    (img:orage5) 3323 1667 (Baie de Gambie) false orage
    (img:orage6) 3552 1427 (Golfe de Guinée) true orage
    (img:orage5) 3837 1302 (Côte d’Angola) false orage
    (img:orage7) 3298 1188 (Atlantique sud) false orage
    (img:orage6) 2972 0621 (Atlantique sud-ouest) true orage
    1 risque
    (img:orage6) 3654 0621 (Atlantique sud-est) true orage
    1 risque
    (img:orage7) 4001 0621 (Cap de Bonne-Espérance) true orage
    1 risque
    (img:orage7) 4726 0621 (Cap des tempêtes) true orage
    1 risque
    (img:orage6) 5243 0064 (Quarantièmes rugissants) false orage
    1 risque
    (img:orage5) 4753 1048 (Canal de Mozambique) true orage
    (img:orage6) 5127 1247 (Océan Indien ouest) true orage
    (img:orage5) 5002 1514 (Mer des Seychelles) true orage
    (img:orage4) 5251 1980 (Côte de Mascate) true orage
    (img:orage5) 5248 1815 (Mer d’Oman) true orage
    (img:orage5) 5472 1584 (Maldives) true orage
    (img:orage5) 5943 1658 (Océan Indien) true orage
    1 risque
    (img:orage5) 6032 1844 (Détroit de Malaisie) true orage
    (img:orage4) 6405 1669 (Mer de Java) false orage
    (img:orage5) 6670 1204 (Mer de Sawu) true orage
    (img:orage5) 6493 1254 (Bassin de Wharton) true orage
    (img:orage5) 6435 0064 (Océan Indien sud) false orage
    (img:orage6) 6873 0064 (Grande Baie australienne) false orage
    (img:orage6) 7598 0064 (Mer de Tasman) false orage
    1 risque
    (img:orage6) 7793 0842 (Mer de Corail) true orage
    1 risque
    (img:orage6) 7839 1284 (Pacifique sud-ouest) true orage
    (img:orage4) 7449 1262 (Mer d’Arafura) false orage
    (img:orage4) 7351 1697 (Mer des Épices) false orage
    (img:orage5) 7645 1684 (Mer des Philippines) true orage
    (img:orage6) 6546 1822 (Mer de Chine sud) false orage
    (img:orage6) 6648 2106 (Détroit de Formose) false orage
    (img:orage5) 7150 2230 (Mer de Chine nord) false orage
    (img:orage4) 6885 2392 (Mer de Corée) false orage
    (img:orage4) 7130 2667 (Mer du Japon) false orage
    (img:orage6) 7430 3020 (Mer d’Okhotsk) false orage
    (img:orage7) 7745 2830 (Pacifique nord-ouest) true orage
    (img:orage8) 7485 2310 (Pacifique ouest) true orage
    (img:orage8) 7920 2530 (Grand océan Pacifique) true orage
    2 risque
    (img:orage6) 0554 0032 (Détroit de Floride) true orage
    (img:orage6) 1434 0523 (Atlantique ouest) true orage
    (img:orage5) 1548 0835 (Bay of Fundy) false orage
    (img:orage4) 5298 0517 (Golfe de l’Indus) true orage
    (img:orage4) 5368 0340 (Côte de Malabar) true orage
    (img:orage4) 6131 0240 (Mer du Bengale) true orage
    (q\n)out clippeddict (Golfe Persique) get out (W n\n) out
    (img:orage4) 5098 2263 (Golfe persique) true orage
    4956 2268 5156 2468 bboxtest {
        [-50 dup cos 1 index sin dup neg 2 index]{display space}forall
        ( 5056 2368 cm\n)out
        (Golfe) 0 10 300 28.35 (FontArialNarrow-Bold) centertext
        (Persique) 0 -10 300 28.35 (FontArialNarrow-Bold) centertext
    } if
    (Q\n)out
    (q\n)out clippeddict (Saint-Laurent) get out (W n\n) out
    (img:orage4) 2205 2874 () true orage
    (Saint-) 2222 2984 300 28.35 (FontArialNarrow-Bold) centertextbbox
    (Laurent) 2313 2984 300 28.35 (FontArialNarrow-Bold) lefttextbbox
    (Q\n)out
    (q\n)out clippeddict (Mer Rouge) get out (W n\n) out
    (img:orage4) 4788 2035 () true orage
    (Mer Rouge) 5021 1962 300 28.35 (FontArialNarrow-Bold) centertext
    (Q\n)out
} if % Sea difficulties
true {
    0.8 beginalpha
    (1 1 0 rg\n) out
    carredict {carre pop}forall
    endalpha
} if % Islands
true {
    [[(Europa Universa)f1][(1)f2][(li)f3][(s )f2]] 3935 2940 256 mtbbox
    (20) 4 1183 0312 [7 6] zm %Amérique
    ( ) ( ) 2007 2521 [] zm %Amérique
    (10) 2 1839 0818 [9 7] zm %Pérou
    (10) 2 2367 0482 [9 6] zm%Patagonie
    (20) 4 1950 1955 [8 6 4] zm %Antilles
    (15) 3 3672 1502 [8 7] zm %Guinée
    (20) 4 5352 1801 [6] zm %Oman
    (30) 6 5745 1634 [5] zm %Indien
    (20) 4 6549 1936 [4] zm %Chine
    (10) 2 4656 0260 [9 7] zm %Tempêtes
    (20) 4 3078 2421 [9] zm %Canaries
    (10) 2 2998 1438 [9 8 7] zm %Recife
} if % Trade zones
true {
    BASEDIR(rotw.portsandmines.ps)! include
    (q\n)out
    BASEDIR(rotw.text.ps)! include
    (Q\n)out
    begindetroit
    detroitdict {detroit pop} forall
    enddetroit
}if % Other included elements
true {
    /i 0 def
    [
        [(0 0 0) 5786 1431]
        [(0 0 0) 5560 2640]
        [(0 0 0) 6014 1074]
        [(1 1 0) 6434 1024]
        [(0 0 0) 5608 0925]
        [(0 0 0) 5665 1106]
        [(0 0 0) 5525 1326]
        [(0 0 0) 5431 2356]
        [(1 1 0) 6214 0786]
        [(0 0 0) 6025 0775]
        [(0 0 0) 5822 0820]
        [(0 0 0) 5808 0593]
        [(0 0 0) 5799 0459]
        [(0 0 0) 5848 0218]
    ] {
        /i i 1 add def aload pop 1 3 1 roll begints
        dup out( rg )out out( RG )out
        newpath 30 0 moveto 0 0 30 0 360 arc closepath (h S\n) exporttopdf
        i 2 string cvs 0 -20 50 40 an centertext
        endts
    } forall
} if % Mogol progression
true {
    /suffixdisplaynamedict <<
        (Ormus)		( (ﺱﺭﺎﭘ))
        (Sibérie)	(\n(Сибирь))
        (Ob)		( (Оби))
        (Ienisseï)	( (Енисей))
        (Lena)		( (Лена))
        (Yakoutie)	( (Якутия))
        (Baïkal)	( (Байкал))
        (Amour)		( (Амур))
        (Japon)		( (日本))
        (Kamchatka\n)	(\n(Камчатска))
        (Manchourie)	( (滿洲))
        (Corée)		( (조선)) % Chosǒn
        (Pékin)		( (北京))
        (Nankin)	( (南京))
        (Canton)	( (广东))
        (Formose)	(\n(Táiwān)\n(台湾))
        (Ayutthaya)	( (อยุธยา))
        (Birmanie)	( (ဗမာ))
        (Soudan)	( (ﻥﺍﺩﻮّﺴﻟﺍ))
        (Nedj)		(\n(ﺪﺟﺎﻧ))
        (Aden)		( (ﻥﺪﻋ))
        (Oman)		( (ﻥﺎﻤﻋ))
        (Bānglā)	( ())
        (Orissā)	(\n())
        (Mumbaī)	(\n())
        (Karnāṭaka)	(\n())
        (Malabāṟ)	( ())
        (Dellī)		(\n())
        (Gujarat)	(\n())
        (Ayodhyā)	(\n())
        (Indus)		(\n(ﺪﻨﺳ))
        (Pãjāb)		(\n())
        (Singala)	( ())
        (Hydārabad)	(\n())
    >> def
    /replacedisplaynamedict <<
        (Îles de la Sonde) (Îles de\nla Sonde)
        (Îles aux Épices) (Îles aux\nÉpices)
    >> def
    /indigenesdict <<
        (Acadie)		[20 1678 1092 false]
        (Aden)			[7 4420 2066 true ]
        (Afghanistan)		[9 5690 2747 false ]
        (Alaska)		[18  0327 3490 true]
        (Amazonia)		[8 2034 1552 true ]
        (America)		[1 1406 1057 false ]
        (Amour)			[2 7263 3243 true ]
        (Angola)		[6 4285 1463 false ]
        (Antilles)		[21 2550 2050 true ]
        (Ayodhyā)		[5 6242 1411 false ]
        (Ayutthaya)		[10 5716 2460 true ]
        (Aral)			[9 5445 2986 false ]
        (Arizona)		[0 0700 2550 false ]
        (Azteca)		[11 0970 2124 true ]
        (Baïkal)		[2 6532 3187 true ]
        (Balouchistan)		[7 5506 2402 false ]
        (Belém)			[8 2471 1496 true ]
        (Bānglā)		[5 6319 0755 true ]
        (Birmanie)		[15 5796 2330 true ]
        (Bornéo)		[10 6569 1744 false ]
        (California)		[0 0620 2720 false ]
        (Cameroun)		[6 4041 1955 true ]
        (Canton)		[4 5876 2640 true ]
        (Cap)			[6 4344 1116 true ]
        (Cabo Verde)		[14 3025 2240 false ]
        (Carolina)		[1 1012 0509 false ]
        (Célèbes)		[10 6808 1326 false ]
        (Chichimeca)		[0 0845 2324 true ]
        (Chili)			[13 1850 0808 true ]
        (Congo)			[6 4239 1618 true ]
        (Corée)			[4 7024 2427 true ]
        (Côte d’Ivoire)		[6 3661 2091 true ]
        (Côte d’Or)		[6  3781 1991 true]
        (Cuba)			[21 1700 2430 true ]
        (Đại Việt)		[15 5816 2550 true ]
        (Dellī)			[5 5910 1489 true ]
        (Ecuador)		[12 1698 1744 false ]
        (Éthiopie)		[23 4595 1952 false ]
        (Florida)		[21 0906 0121 true ]
        (Formose)		[4 6935 2342 false ]
        (Gabon)			[6 4223 1764 true ]
        (Gonḍānā)		[5 6250 0660 false ]
        (Grands Lacs)		[20 0316 1656 true ]
        (Gujarat)		[5 5242 0891 false ]
        (Guyana)		[8 2551 1900 true ]
        (Haïti)			[21 2001 2542 true ]
        (Hudson)		[19 1176 3527 true ]
        (Hydārabad)		[5 5480 0420 false ]
        (Ienisseï)		[2 5710 2977 true ]
        (Îles aux Épices)	[10 7103 1658 false ]
        (Îles de la Sonde)	[10 7037 1441 false ]
        (Illinois)		[1  0110 1022 true]
        (Inca)			[12 1921 1137 false ]
        (Indus)			[5 5612 1644 true ]
        (Iroquois)		[1 0070 0880 true ]
        (Japon)			[3 7345 2730 true ]
        (Java)			[10 6729 1160 false ]
        (Kamchatka)		[19 7874 3322 false ]
        (Kansas)		[1 1603 2746 true ]
        (Karnāṭaka)		[5 5960 0500 false ]
        (Kenya)			[23 4478 1737 true  ]
        (Labrador)		[19 2030 3285 true ]
        (Lena)			[2 6103 2991 true ]
        (Madagascar)		[6 4879 0956 false ]
        (Malabāṟ)		[5 5460 0126 true ]
        (Malacca)		[15 5840 2080 true ]
        (Malouines)		[16 2446 0271 true ]
        (Mandchourie)		[4 6450 2961 true ]
        (Manitoba)		[20 1129 3439 false  ]
        (Mascareignes)		[14 4937 0732 true ]
        (Mauritanie)		[6 3551 2291 true ]
        (Minas Gerais)		[8 2430 1344 true ]
        (Mississipi)		[1 0233 0208 false ]
        (Mumbaī)		[5 5427 0757 false ]
        (Namibie)		[6 4297 1278 false ]
        (Nankin)		[4 5918 2730 true ]
        (Natal)			[6 4458 1290 false ]
        (Nedj)			[7 4729 2485 false ]
        (Nevada)		[0 0925 2745 true ]
        (Nyasa)			[23 4531 1505 false ]
        (Ob)			[2 5425 3121 true ]
        (Océanie)		[17 7093 1028 true ]
        (Oman)			[7 4930 2221 true ]
        (Oregon)		[18 0605 2960 false ]
        (Orissā)		[5 6107 0623 false ]
        (Ormus)			[9 4938 2603 true]
        (Pacifique)		[14 7946 2340 true ]
        (Panamá)		[8 1694 1834 true ]
        (Paraguay)		[8 2205 1064 false ]
        (Patagonia)		[13 2225 0483 false ]
        (Pékin)			[4 6290 2740 true ]
        (Pãjāb)			[5 5938 1385 true ]
        (Philippines)		[10 7273 1964 true ]
        (Plata)			[13 2518 0777 false ]
        (Québec)		[20 0749 1702 false ]
        (Recife)		[8 2984 1438 true ]
        (Rio)			[8 2855 1160 true ]
        (Rocheuses)		[18 0862 3266 true ]
        (Sénégal)		[6 3611 2191 true ]
        (Seychelles)		[14 5279 1650 false ]
        (Singala)		[5 6035 0160 true ]
        (Sibérie)		[2 5000 3500 false ]
        (Soudan)		[7 4340 2186 true ]
        (Sainte-Hélène)		[22 3692 1181 false ]
        (Sumatra)		[10 6075 1753 false ]
        (Terre-Neuve)		[16 2570 3020 true ]
        (Texas)			[0 1535 2517 true ]
        (Venezuela)		[8 2040 1751 true ]
        (Virginia)		[1 1187 0847 false ]
        (Yakoutie)		[2 7333 3508 true ]
        (Yucatán)		[8 1492 1992 false ]
    >> def
    /provlinkdict <<
        (Aden) 			[1.5 4896 2022]
        (Arizona) 		[1.5 1180 2550]
        (Ayutthaya) 		[1 6296 2262]
        (Bānglā) 		[2.5 6540 0837]
        (Canton) 		[1 6358 2345]
        (Célèbes) 		[2.5 6859 1604]
        (Corée) 		[3 6984 2545]
        (Côte d’Ivoire) 	[0.25 3646 1867]
        (Côte d’Or) 		[0.25 3831 1893]
        (Cuba) 			[0.5 1880 2242]
        (Đại Việt) 		[1 6354 2238]
        (Éthiopie)		[1.5 4895 1872]
        (Gonḍānā) 		[3 6160 0829]
        (Haïti) 		[0.5 2103 2170]
        (Hydārabad) 		[1.75 5757 0561]
        (Inca) 			[2.5 2027 1292]
        (Indus) 		[0 5534 1397]
        (Iroquois) 		[1.5 0500 0676]
        (Java) 			[3 6538 1450]
        (Malacca) 		[1.5 6243 1872]
        (Natal) 		[1 4584 1028]
        (Ormus) 		[0.75 5224 2352]
        (Pãjāb) 		[3.5 5746 1266]
        (Sénégal) 		[0.0 3549 1986]
        (Nankin) 		[1 6390 2518]
        (Sibérie) 		[1.5 5286 3420]
    >> def
    /provind [
        [(img:indigene00) -2.5  0 0.5]% Indien apache
        [(img:indigene01) 2  0 0.5]% Indien iroquois
        [(img:indigene02) 0  0 0.5]% Mongol
        [(img:indigene03) 0  3 0.5]% Japonais
        [(img:indigene04) 0  0 0.5]% Chinois
        [(img:indigene05) 0  3 0.5]% Hindou
        [(img:indigene06) 3  0 0.5]% Zoulou
        [(img:indigene07) 3  0 0.5]% Mamelouk
        [(img:indigene08) 0  5 0.5]% Brésilien
        [(img:indigene09) 4  0 0.5]% Perse
        [(img:indigene10) 0  4 0.5]% Oceanie
        [(img:indigene11) 3  0 0.5]% Azteque
        [(img:indigene12) 1  0 0.5]% Inca
        [(img:indigene13) 0  4 0.5]% Mapuche
        [(img:indigene14) 0 10 0.5]% Poissons
        [(img:indigene15) 0  0 0.5]% Indochine
        [(img:indigene16) 0  5 0.5]% Baleines
        [(img:indigene17) 0 15 0.5]% Kangourous
        [(img:indigene18)10  0 0.5]% Indien pacifique
        [(img:indigene19) 0  6 0.5]% Ours polaires
        [(img:indigene20) 1  0 0.5]% Indiens du nord
        [(img:indigene21) 9  0 0.5]% Caribes
        [(img:indigene22) 9  0 0.5]% Napoleons
        [(img:indigene23) 8  0 0.5]% Masai
    ] def
    /provincepens <<
        (:00) (1 1 1)
        (00:) (1 1 0)
        (::0) (0 0 0)
        (000) (1 1 0)
        (:::) (0 0 0)
        (060) (1 1 1)
        (:0:) (0 0 0)
        (0::) (0 0 0)
        (333) (1 1 1)
        (448) (1 1 1)
        (255) (1 1 0)
    >> def
    /tordesillasdict <<
        (Amazonia) [(tordesillas)]
        (Minas Gerais) [(tordesillas)]
        (Philippines) [(tordesillas)]
        (Japon) [(tordesillas)]
        (Kamchatka) [(tordesillas)]
        (Mandchourie) [(tordesillas)]
        (Corée) [(tordesillas)]
        (Pékin) [(tordesillas)]
        (Nankin) [(tordesillas)]
        (Formose) [(tordesillas)]
        (Guyana) [(tordesillas)]
        (Belém) [(portugal)]
        (Recife) [(portugal)]
        (Rio) [(portugal)]
    >> def
} if % Ressources setup    
true {
    BASEDIR(rotw.resources.ps)! include
    /provinceresourcedraw {% [type quantity] x1 y1 x2 y2 => ---
        /provresyy exch def
        /provresxx exch def
        /provresy exch def
        /provresx exch def
        aload pop exch couleurproduitsdict exch get aload pop pop pop
        [ exch {12 string cvs ( )}forall pop ]!! /provrespencolor exch def
        [ exch {12 string cvs ( )}forall pop ]!! /provresbgcolor exch def
        /provresview exch def 2 string cvs /provresquantity exch def
        provresview 0 3 getinterval aload pop provresy add
        exch provresx add exch putsymbol
        provresbgcolor out (rg 0 0 0 RG 2 w\n) out provresview 4 get
        {
           dup 0 eq {
                provresxx 2 add display space provresyy 2 add display
                ( 36 36 re B\n)out
                exit
            } if
            dup 1 eq {
                newpath provresxx 38 add provresyy 20 add moveto
                provresxx 20 add provresyy 20 add 18 0 360 arc closepath (h B\n) exporttopdf
                exit
            } if
            dup 2 eq {
                newpath provresxx 20 add provresyy 2 add moveto
                provresxx 38 add provresyy 20 add lineto
	        provresxx 20 add provresyy 38 add lineto
                provresxx 2 add provresyy  20 add lineto
                closepath
	        (h B\n) exporttopdf
                exit
            } if
            exit
        } loop pop provrespencolor( rg\n)! out
        provresquantity provresxx 20 add provresyy 40 40(FontArialNarrow)centertext
    } bd
    /provinceindigene {% x y => ---
        /provimy exch def
        /provimx exch def
        provind provheader 0 get get aload pop
        /provimscale exch def
        /provimyy exch def
        /provimxx exch def
        /provimname exch def
        provimscale provimx provimxx add provimy provimyy add
        begints provimname useimage endts
    } bd
    /provincerelpos { % relpos adjust => coordinates
        /provlinkadjust exch def
        dup 0 lt {4 add} if dup 4 ge {4 sub} if
        /provlinkxxcorner exch def
        /provlinkxcorner provlinkxxcorner dup cvi 2 copy eq {
            provlinkadjust 0 lt{1 sub}if
        } if dup 0 lt {/provlinkxxcorner provlinkxxcorner 4 add def 4 add} if
        exch pop def
        /provlinkxprop provlinkxxcorner provlinkxcorner sub def
        {
            provlinkxcorner 0 eq {
                provx provlinkxprop provwidth mul provlinkadjust add add
                provy provheight sub
                exit
            } if
            provlinkxcorner 1 eq {
                provx provwidth add
                provy provheight 1 provlinkxprop sub mul sub provlinkadjust add
                exit
            } if
            provlinkxcorner 2 eq {
                provx provwidth 1 provlinkxprop sub mul provlinkadjust sub add
                provy
                exit
            } if
            provlinkxcorner 3 eq {
                provx 
                provy provheight provlinkxprop mul sub provlinkadjust sub
                exit
            } if
            provlinkbug
        } loop
    } bd
    /provinceframe {
        provlinkdict provcode known {
            /provlinkpos provlinkdict provcode get aload pop
            /provlinkyy exch def
            /provlinkxx exch def def
            provlinkpos 0 provincerelpos /provlinky exch def /provlinkx exch def
            provx provlinkxx 10 sub .min
            provy provheight sub provlinkyy 10 sub .min
            provx provwidth add provlinkxx 10 add .max
            provy provlinkyy 10 add .max
        }{
            provx provy provheight sub provx provwidth add provy
        }ifelse
        bboxtest {
            0.5 1 beginbialpha
	    provpen out( RG 0 G 1 w )out provcolor{display space}forall(rg\n)out
	    provx display space
	    provy provheight sub display space
            provlinkdict provcode known {
                provlinkpos -5 provincerelpos exch display space display ( m\n)out
                /provlinkalpha provlinkyy provlinky sub provlinkxx provlinkx sub atan def
                /provlinklen provlinkyy provlinky sub dup mul provlinkxx provlinkx sub dup mul add sqrt def
                provlinkx provlinklen 5 sub 5 .max provlinkalpha cos mul add
                2 provlinkalpha sin mul add display space
                provlinky provlinklen 5 sub 5 .max provlinkalpha sin mul add
                2 provlinkalpha cos mul sub display ( l\n)out
                provlinkx provlinklen 5 sub 5 .max provlinkalpha cos mul add
                5 provlinkalpha sin mul add display space
                provlinky provlinklen 5 sub 5 .max provlinkalpha sin mul add
                5 provlinkalpha cos mul sub display ( l\n)out
                provlinkxx display space provlinkyy display ( l\n)out
                provlinkx provlinklen 5 sub 5 .max provlinkalpha cos mul add
                5 provlinkalpha sin mul sub display space
                provlinky provlinklen 5 sub 5 .max provlinkalpha sin mul add
                5 provlinkalpha cos mul add display ( l\n)out
                provlinkx provlinklen 5 sub 5 .max provlinkalpha cos mul add
                2 provlinkalpha sin mul sub display space
                provlinky provlinklen 5 sub 5 .max provlinkalpha sin mul add
                2 provlinkalpha cos mul add display ( l\n)out
                provlinkpos 5 provincerelpos exch display space display
                ( l\n)out
                provlinkxcorner 1 add 1 provlinkxcorner 4 add
                provlinkxxcorner provlinkxcorner eq {1 sub} if {
                    0 provincerelpos exch display space display ( l\n)out
                } for (h\n) out
            }{
                provwidth display space provheight display ( re )out
            } ifelse
            (B\n) out
            endalpha
            provpen out( RG )out provpen out( rg\n) out
        }if
    } bd
    /provincesetup { % minimal width => ---
        /provmax exch def
        /provcolor namesdict provcode get def
        /provcolorcode 3 string -1 provcolor {
            10 mul 48 add cvi exch 1 add exch 3 copy put pop
        } forall pop def
        /provpen (1 0 0) 
        provincepens provcolorcode known {pop provincepens provcolorcode get}if def
        /provname [
	    suffixdisplaynamedict provcode known {
                provcode suffixdisplaynamedict provcode get !
            }{
                replacedisplaynamedict provcode known {
                    replacedisplaynamedict provcode get
                }{provcode}ifelse
            }ifelse
            {(\n)search{exch pop exch}{exit}ifelse}loop
        ] def
        /provresources [
            [/orient /epices /soie /esclaves /sel /peaux /peche /bois /sucrebr /sucre /america /cotonas /coton /areacold] {
                /provres exch def
                resourcesdict provres get dup provcode known {
                    provcode get [ provres 3 -1 roll ]
                }{pop} ifelse
            } forall
        ] def
        /provcarac1 resourcesdict (values) get provcode get def
        /provcarac2 resourcesdict (forces) get provcode get def
        40 (FontArialNarrow-Bold) setbasefont
        /provw0 0 provname {_ stringwidth .max}forall provmax .min def
        40 (FontArialNarrow) setbasefont
        /provw1 provcarac1 _ stringwidth def
        /provw2 provcarac2 _ stringwidth def
        /provw3 60 def
        /provx provheader 1 get def
        /provy provheader 2 get def
    } bd
    /provincev {
        150 provincesetup
        /provwidth provw0 [
            provw3 provw1 5 add add
            provw3 provw2 5 add add
            provresources length 0 gt {85} if
        ] {.max} forall 10 add def
        /provheight 80 provresources length provname length add 40 mul add def
        provinceframe
        provx provy provheight sub provx provwidth add provy bboxtest {
            /decy 40 def
            provname {provx provwidth 2 div add provy decy sub provmax 40
            (FontArialNarrow-Bold) centertext /decy decy 40 add def}forall
            /decy decy 40 add def
            /provspacing provwidth provw1 provw2 .max provw3 5 add add sub 2 div def
            provx provspacing add dup provy decy sub provinceindigene
            provw3 add 5 add provy decy sub 200 40 (FontArialNarrow)
            5 copy provcarac1 6 1 roll 4 -1 roll 40 add 4 1 roll lefttext provcarac2 6 1 roll lefttext
            /provspacing provwidth 85 sub 2 div def
            provresources {
                /decy decy 40 add def
                provx provspacing add provy decy sub 2 copy exch 45 add exch
                4 2 roll provinceresourcedraw
            } forall
        } if
    } bd
    /provinceh {
        230 provincesetup
        /provspacing provw0 provw1 provw2 15 add add .max def
        /provwidth 80 provspacing add provresources length 40 mul add def
        /provheight 80 def
        provinceframe
        provx provy provheight sub provx provwidth add provy bboxtest {
            [provname {( )}forall pop]!! provx 70 add provspacing 2 div add
            provy 40 sub provspacing 40 (FontArialNarrow-Bold) centertext
            provx 5 add provy 80 sub provinceindigene
            provx 70 add provspacing provw1 provw2 15 add add sub 2 div add
            provy 80 sub provw1 40 (FontArialNarrow) 5 copy
            provcarac1 6 1 roll lefttext 5 -1 roll provw1 add 15 add
            provcarac2 exch 6 2 roll lefttext
            /provspacing provx 75 add provspacing add def
            provresources {
                provspacing provy 80 sub 2 copy 40 add provinceresourcedraw
                /provspacing provspacing 40 add def
            } forall
        } if
    } bd
    indigenesdict {
        /provheader exch def
        /provcode exch 30 string cvs def
        provheader 3 get {provinceh}{provincev}ifelse
        tordesillasdict provcode known {
            /provyy provy 60 sub
                provheader 3 get not {provname length 40 mul sub}if
                tordesillasdict provcode get length 1 gt {20 add} if
            def
            /provxx provx 25 sub def
            tordesillasdict provcode get {
                (img:) exch ! provxx provyy putsymbol /provyy provyy 40 sub def
            } forall
        } if
    } forall
} if % Ressources

true {
    /size 185 def
    (/Type /XObject /Subtype /Form /FormType 1 /BBox [-1 -1 11 16]  /Matrix [3 0 0 3 10 125]/Resources << >>#DICT#q 4 0 m 4 9 l 0 9 l 0 11 l 4 11 l 4 15 l 6 15 l 6 11 l 10 11 l 10 9 l 6 9 l 6 0 l 4 0 l B Q\n) (catholique) futureobj
    (/Type /XObject /Subtype /Form /FormType 1 /BBox [-1 -1 11 16]  /Matrix [3 0 0 3 142 125]/Resources << >>#DICT#q 4 -1 m 4 3 l 2.5 3.5 l 2.5 5.5 l 4 5 l 4 8.5 l 0 8.5 l 0 10.5 l 4 10.5 l 4 12 l 2.5 12 l 2.5 13.5 l 4 13.5 l 4 15 l 6 15 l 6 13.5 l 7.5 13.5 l 7.5 12 l 6 12 l 6 10.5 l 10 10.5 l 10 8.5 l 6 8.5 l 6 4.5 l 7.5 4 l 7.5 2 l 6 2.5 l 6 -1 l 4 -1 l B Q\n) (orthodoxe) futureobj
    (/Type /XObject /Subtype /Form /FormType 1 /BBox [-1 -1 11 16]  /Matrix [3 0 0 3 54 125]/Resources << >>#DICT#q 9.33 12.5 m 8.437 14.047 6.786 15 5 15 c 2.239 15 0 12.761 0 10 c 0 7.238 2.239 5 5 5 c 6.786 5 8.437 5.953 9.33 7.5 c 9.33 7.5 l 8.697 6.91 7.865 6.582 7 6.582 c 5.113 6.582 3.582 8.112 3.582 10 c 3.582 11.887 5.113 13.417 7 13.417 c 7.865 13.417 8.697 13.089 9.33 12.5 c h B Q\n) (sunnite) futureobj
    (/Type /XObject /Subtype /Form /FormType 1 /BBox [-1 -1 11 16]  /Matrix [3 0 0 3 98 125]/Resources << >>#DICT#q 1.5 w 10 10 m 10 12.761 7.761 15 5 15 c 2.239 15 0 12.761 0 10 c 0 7.238 2.239 5 5 5 c 7.761 5 10 7.238 10 10 c s 0.5 w 5 5 m 7.761 5 10 7.238 10 10 c 10 12.761 7.761 15 5 15 c 5 15 l 3.619 15 2.5 13.88 2.5 12.5 c 2.5 11.119 3.619 10 5 10 c 5 10 l 6.38 10 7.5 8.881 7.5 7.5 c 7.5 6.119 6.38 5 5 5 c B 0 0 0 RG 10 10 m 10 12.761 7.761 15 5 15 c 2.239 15 0 12.761 0 10 c 0 7.238 2.239 5 5 5 c 7.761 5 10 7.238 10 10 c s Q\n) (autrereligion) futureobj
    (/Type /XObject /Subtype /Form /FormType 1 /BBox [0 0 20 20]  /Matrix [1 0 0 1 0 0]/Resources << >>#DICT#q 0 20 m 0 0 l 20 10 l h f Q\n) (rtriangle) futureobj
    (/Type /XObject /Subtype /Form /FormType 1 /BBox [0 0 20 20]  /Matrix [1 0 0 1 0 0]/Resources << >>#DICT#q 20 0 m 20 20 l 0 10 l h f Q\n) (ltriangle) futureobj
    (/Type /XObject /Subtype /Form /FormType 1 /BBox [0 0 20 20]  /Matrix [1 0 0 1 0 0]/Resources << >>#DICT#q 0 0 m 20 0 l 10 20 l h f Q\n) (utriangle) futureobj
    (/Type /XObject /Subtype /Form /FormType 1 /BBox [0 0 20 20]  /Matrix [1 0 0 1 0 0]/Resources << >>#DICT#q 0 20 m 20 20 l 10 0 l h f Q\n) (dtriangle) futureobj
    (/Type /XObject /Subtype /Form /FormType 1 /BBox [0 0 20 20]  /Matrix [1 0 0 1 0 0]/Resources << >>#DICT#q 17 10 m 17 13.865 13.865 17 10 17 c 6.134 17 3 13.865 3 10 c 3 6.134 6.134 3 10 3 c 13.865 3 17 6.134 17 10 c 17 13.865 13.865 17 10 17 c 6.134 17 3 13.865 3 10 c 3 6.134 6.134 3 10 3 c 13.865 3 17 6.134 17 10 c f Q\n) (circle) futureobj
} if % Xobjects
true {
    /yearcount {/i exch i add def
        (Turn:) i 2 string cvs ! xtrace ytrace xsize size writetrace
        (1 w 1 1 1 RG 0 0 0 rg\n)out
        /TextRenderingMode 2 def
        i 2 string cvs size 0.5 mul 30 size size 60 sub (FontArialNarrow-Bold) centertext
        /TextRenderingMode 0 def
        (q 0.5 w 0 0 0 rg 0.3 1 1 RG )out
        i 2 mod 0 eq{(catholique)xobject}if
        i 5 mod 1 eq i 1 eq not and{(sunnite)xobject}if
        i 10 mod 1 eq i 1 eq not and{(autrereligion)xobject}if
        i 4 mod 3 eq{(orthodoxe)xobject}if
        (Q\n)out
        1490 i 5 mul add dup i 1 eq{3}{5}ifelse sub 4 string cvs (-)! exch 4 string cvs ! size 0.5 mul 4 size 30(FontArialNarrow) centertext
    } bd
    zpor zpor2 8187 size 42 mul sub 3550 6 size{0 yearcount}hshade
    ztur ztur2 xstart ystart 8 size{6 yearcount}hshade
    zspa zspa2 xstart ystart 11 size{14 yearcount}hshade
    zhol zhol2 xstart ystart 9  size{25 yearcount}hshade
    zfra zfra2 xstart ystart 8  size{34 yearcount}hshade
    zrus zrus2 xstart ystart 10 size{42 yearcount}yshade
    zeng zeng2 xstart ystart 10 size{52 yearcount}yshade
    (0 0 0 rg 0 0 0 RG\n) out
    (Game Turn) 8187 size 42 mul sub 2 div 3580 1 index 10 sub 2 mul 110 ab centertextbbox
    
    (q 10 w 0000 3750 m 8425 3750 l s Q\n)out
} if % Turn track
endpage
enddocument
finishtrace
