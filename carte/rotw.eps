%!PS
/globalscale 72 180 div def
/pagewidth 8425 def % default values
/pageheight 5840 def % default values
/traces BASEDIR (rotw) ! TARGET eq def

(library/library.ps) include
(library/libcarte.ps) include

% map clipping settings
TARGET(.background.clipping.txt)! include
/pagewidth MAXx MINx sub def
/pageheight MAXy MINy sub def

% Images & Fonts
BASEDIR(images.ps)! include
FONTDIR(champion.ps)! include

/xfact 40955 3500 sub 8425 0 sub div def
/yfact 29465 3500 sub 5840 0 sub div def
/xbase 3500 0 xfact mul sub .5 add def
/ybase 3500 0 yfact mul sub .5 add def
(RotwSource) inittrace

<< /Title ((ROTW Map for EU9)) >> infochunk

begindocument
beginpage
true {
    (0 0 )out pagewidth display space pageheight display ( re W n 1 0 0 1 )out
    MINx neg display space MINy neg display ( cm\n)out
    TARGET(.background.clp)! copymap
} if % include background
true {
    (img:orage6) 0240 3040 (Mer d’Alaska) true orage
    (img:orage5) 0430 2800 (Golfe de Californie) false orage
    (img:orage7) 0366 2150 (Pacifique nord-est) true orage
    1 risque
    (img:orage8) 0366 1835 (Pacifique sud-est) true orage
    1 risque
    (img:orage8) 1390 0050 (Pacifique sud-est) true orage
    1 risque
    (img:orage6) 1181 1861 (Golfe de Panama) true orage
    (img:orage5) 1702 0623 (Côte du Pérou) true orage
    (img:orage5) 1636 0197 (Côte du Chili) true orage
    (img:orage8) 1842 0014 (Cap Horn) true orage
    2 risque
    (img:orage6) 2387 0359 (Côte de Patagonie) true orage
    (img:orage4) 2695 0750 (Rio de la Plata) false orage
    (img:orage4) 2860 0851 (Mer de Bahia) true orage
    (img:orage5) 2964 1187 (Mer de Recife) true orage
    (img:orage6) 2935 1935 (Atlantique équatorial) false orage
    (img:orage5) 2696 1645 (Golfe d’Amazonie) true orage
    (img:orage6) 2546 2229 (Îles sous-le-vent) false orage
    (img:orage6) 2150 1965 (Caraïbes) false orage
    (img:orage6) 1490 2240 (Golfe du Mexique) false orage
    (img:orage6) 1992 2206 (Cuba) true orage
    (img:orage6) 2254 2244 (Puerto Rico) false orage
    (img:orage7) 2386 2472 (Triangle des Bermudes) false orage
    (img:orage5) 2355 2716 (Atlantique nord-ouest) true orage
    (img:orage6) 2338 3354 (Mer du Labrador) false orage
    (img:orage6) 1638 3265 (Baie d’Hudson) true orage
    2 risque
    (img:orage5) 2964 3228 (Grœnland) false orage
    (img:orage6) 3230 2780 (Mer des Açores) false orage
    (img:orage5) 3293 2507 (Mer des Canaries) true orage
    (img:orage6) 2735 2660 (Atlantique nord) false orage
    (img:orage6) 2735 2380 (Atlantique) false orage
    (img:orage5) 3260 2130 (Banc d’Arguin) true orage
    (img:orage5) 3323 1667 (Baie de Gambie) false orage
    (img:orage6) 3552 1427 (Golfe de Guinée) true orage
    (img:orage5) 3837 1302 (Côte d’Angola) false orage
    (img:orage7) 3298 1188 (Atlantique sud) false orage
    (img:orage6) 2972 0621 (Atlantique sud-ouest) true orage
    1 risque
    (img:orage6) 3654 0621 (Atlantique sud-est) true orage
    1 risque
    (img:orage7) 4001 0621 (Cap de Bonne-Espérance) true orage
    1 risque
    (img:orage7) 4726 0621 (Cap des tempêtes) true orage
    1 risque
    (img:orage6) 5243 0064 (Quarantièmes rugissants) false orage
    1 risque
    (img:orage5) 4753 1048 (Canal de Mozambique) true orage
    (img:orage6) 5127 1247 (Océan Indien ouest) true orage
    (img:orage5) 5002 1514 (Mer des Seychelles) true orage
    (img:orage4) 5251 1980 (Côte de Mascate) true orage
    (img:orage5) 5248 1815 (Mer d’Oman) true orage
    (img:orage5) 5472 1584 (Maldives) true orage
    (img:orage5) 5963 1658 (Océan Indien) true orage
    1 risque
    (img:orage5) 6032 1844 (Détroit de Malaisie) true orage
    (img:orage4) 6405 1669 (Mer de Java) false orage
    (img:orage5) 6670 1204 (Mer de Sawu) true orage
    (img:orage5) 6493 1254 (Bassin de Wharton) true orage
    (img:orage5) 6435 0064 (Océan Indien sud) false orage
    (img:orage6) 6873 0064 (Grande Baie australienne) false orage
    (img:orage6) 7598 0064 (Mer de Tasman) false orage
    1 risque
    (img:orage6) 7793 0842 (Mer de Corail) true orage
    1 risque
    (img:orage6) 7839 1284 (Pacifique sud-ouest) true orage
    (img:orage4) 7449 1262 (Mer d’Arafura) false orage
    (img:orage4) 7351 1697 (Mer des Épices) false orage
    (img:orage5) 7645 1684 (Mer des Philippines) true orage
    (img:orage6) 6546 1822 (Mer de Chine sud) false orage
    (img:orage6) 6648 2106 (Détroit de Formose) false orage
    (img:orage5) 7150 2230 (Mer de Chine nord) false orage
    (img:orage4) 6885 2392 (Mer de Corée) false orage
    (img:orage4) 7130 2667 (Mer du Japon) false orage
    (img:orage6) 7430 3020 (Mer d’Okhotsk) false orage
    (img:orage7) 7745 2830 (Pacifique nord-ouest) true orage
    (img:orage8) 7485 2310 (Pacifique ouest) true orage
    (img:orage8) 7920 2530 (Grand océan Pacifique) true orage
    2 risque
    (img:orage6) 0554 0032 (Détroit de Floride) true orage
    (img:orage6) 1434 0523 (Atlantique ouest) true orage
    (img:orage5) 1548 0835 (Bay of Fundy) false orage
    (img:orage4) 5298 0517 (Golfe de l’Indus) true orage
    (img:orage4) 5368 0340 (Côte de Malabar) true orage
    (img:orage4) 6131 0240 (Mer du Bengale) true orage
    (q\n)out clippeddict (Golfe Persique) get out (W n\n) out
    (img:orage4) 5098 2263 (Golfe persique) true orage
    4956 2268 5156 2468 bboxtest {
        [-50 dup cos 1 index sin dup neg 2 index]{display space}forall
        ( 5056 2368 cm\n)out
        (Golfe) 0 10 300 28.35 (FontArialNarrow-Bold) centertext
        (Persique) 0 -10 300 28.35 (FontArialNarrow-Bold) centertext
    } if
    (Q\n)out
    (q\n)out clippeddict (Saint-Laurent) get out (W n\n) out
    (img:orage4) 2205 2874 () true orage
    (Saint-) 2222 2984 300 28.35 (FontArialNarrow-Bold) centertextbbox
    (Laurent) 2313 2984 300 28.35 (FontArialNarrow-Bold) lefttextbbox
    (Q\n)out
    (q\n)out clippeddict (Mer Rouge) get out (W n\n) out
    (img:orage4) 4788 2035 () true orage
    (Mer Rouge) 5021 1962 300 28.35 (FontArialNarrow-Bold) centertext
    (Q\n)out
} if % Sea difficulties
true {
    0.8 beginalpha
    (1 1 0 rg\n) out
    carredict {carre pop}forall
    endalpha
} if % Islands
true {
    [[(Europa Universa)f1][(1)f2][(li)f3][(s )f2]] 3935 2940 256 mtbbox
    (20) 4 1183 0312 [7 6] zm %Amérique
    ( ) ( ) 2007 2521 [] zm %Amérique
    (10) 2 1839 0818 [9 7] zm %Pérou
    (10) 2 2367 0482 [9 6] zm%Patagonie
    (20) 4 1950 1955 [8 6 4] zm %Antilles
    (15) 3 3672 1502 [8 7] zm %Guinée
    (20) 4 5352 1801 [6] zm %Oman
    (30) 6 5745 1634 [5] zm %Indien
    (20) 4 6549 1936 [4] zm %Chine
    (10) 2 4656 0260 [9 7] zm %Tempêtes
    (20) 4 3078 2421 [9] zm %Canaries
    (10) 2 2998 1438 [9 8 7] zm %Recife
} if % Trade zones
true {
    BASEDIR(rotw.portsandmines.ps)! include
    (q\n)out
    BASEDIR(rotw.text.ps)! include
    (Q\n)out
    begindetroit
    detroitdict {detroit pop} forall
    enddetroit
}if % Other included elements
true {
    /i 0 def
    [
        [(0 0 0) 5786 1431]
        [(0 0 0) 5560 2640]
        [(0 0 0) 6014 1074]
        [(1 1 0) 6434 1024]
        [(0 0 0) 5608 0925]
        [(0 0 0) 5665 1106]
        [(0 0 0) 5525 1326]
        [(0 0 0) 5431 2356]
        [(1 1 0) 6214 0786]
        [(0 0 0) 6025 0775]
        [(0 0 0) 5822 0820]
        [(0 0 0) 5808 0593]
        [(0 0 0) 5799 0459]
        [(0 0 0) 5848 0218]
    ] {
        /i i 1 add def aload pop 1 3 1 roll begints
        dup out( rg )out out( RG )out
        newpath 30 0 moveto 0 0 30 0 360 arc closepath (h S\n) exporttopdf
        i 2 string cvs 0 -20 50 40 an centertext
        endts
    } forall
} if % Mogol progression
true {
    BASEDIR(rotw.resources.ps)! include
    /suffixdisplaynamedict <<
        (Ormus)		( (ﺱﺭﺎﭘ))
        (Sibérie)	(\n(Сибирь))
        (Ob)		( (Оби))
        (Ienisseï)	( (Енисей))
        (Lena)		( (Лена))
        (Yakoutie)	( (Якутия))
        (Baïkal)	( (Байкал))
        (Amour)		( (Амур))
        (Japon)		( (日本))
        (Kamchatka\n)	(\n(Камчатска))
        (Manchourie)	( (滿洲))
        (Corée)		( (조선)\nChosǒn)
        (Pékin)		( (北京))
        (Nankin)	( (南京))
        (Canton)	( (广东))
        (Formose)	(\n(Táiwān)\n(台湾))
        (Ayutthaya)	( (อยุธยา))
        (Birmanie)	( (ဗမာ))
        (Soudan)	( (ﻥﺍﺩﻮّﺴﻟﺍ))
        (Nedj)		(\n(ﺪﺟﺎﻧ))
        (Aden)		( (ﻥﺪﻋ))
        (Oman)		( (ﻥﺎﻤﻋ))
        (Bānglā)	( ())
        (Orissā)	( ())
        (Mumbaī)	(\n())
        (Karnāṭaka)	(\n())
        (Malabāṟ)	( ())
        (Dellī)		(\n())
        (Gujarat)	(\n())
        (Ayodhyā)	(\n())
        (Indus)		(\n(ﺪﻨﺳ))
        (Pãjāb)		(\n())
        (Singala)	( ())
        (Hydārabad)	(\n())
    >> def
    /replacedisplaynamedict <<
        (Îles de la Sonde) (Îles de\nla Sonde)
        (Îles aux Épices) (Îles aux\nÉpices)
    >> def
    /indigenesdict <<
        (Acadie)		[20 1678 1092 false]
        (Formose)		[4 6935 2342 false]
    >> def
    /otherindigenesdict <<
        (Acadie)		20
        (Aden)			7
        (Afghanistan)		9
        (Alaska)		18
        (Amazonia)		8
        (America)		1
        (Amour)			2
        (Angola)		6
        (Antilles)		21
        (Ayodhyā)		5
        (Ayutthaya)		10
        (Aral)			9
        (Arizona)		0
        (Azteca)		11
        (Baïkal)		2
        (Balouchistan)		7
        (Belém)			8
        (Bānglā)		5
        (Birmanie)		15
        (Bornéo)		10
        (California)		0
        (Cameroun)		6
        (Canton)		4
        (Cap)			6
        (Cabo Verde)		14
        (Carolina)		1
        (Célèbes)		10
        (Chichimeca)		0
        (Chili)			13
        (Congo)			6
        (Corée)			4
        (Côte d’Ivoire)		6
        (Côte d’Or)		6
        (Cuba)			21
        (Đại Việt)		15
        (Dellī)			5
        (Ecuador)		12
        (Éthiopie)		23
        (Florida)		21
        (Formose)		4
        (Gabon)			6
        (Gonḍānā)		5
        (Grands Lacs)		20
        (Gujarat)		5
        (Guyana)		8
        (Haïti)			21
        (Hudson)		19
        (Hydārabad)		5
        (Ienisseï)		2
        (Îles aux Épices)	10
        (Îles de la Sonde)	10
        (Illinois)		1
        (Inca)			12
        (Indus)			5
        (Iroquois)		1
        (Japon)			3
        (Java)			10
        (Kamchatka)		19
        (Kansas)		1
        (Karnāṭaka)		5
        (Kenya)			23
        (Labrador)		19
        (Lena)			2
        (Madagascar)		6
        (Malabāṟ)		5
        (Malacca)		15
        (Malouines)		16
        (Mandchourie)		4
        (Manitoba)		20
        (Mascareignes)		14
        (Mauritanie)		6
        (Minas Gerais)		8
        (Mississipi)		1
        (Mumbaī)		5
        (Namibie)		6
        (Nankin)		4
        (Natal)			6
        (Nedj)			7
        (Nevada)		0
        (Nyasa)			23
        (Ob)			2
        (Océanie)		17
        (Oman)			7
        (Oregon)		18
        (Orissā)		5
        (Ormus)			9
        (Pacifique)		14
        (Panamá)		8
        (Paraguay)		8
        (Patagonia)		13
        (Pékin)			4
        (Pãjāb)			5
        (Philippines)		10
        (Plata)			13
        (Québec)		20
        (Recife)		8
        (Rio)			8
        (Rocheuses)		18
        (Sénégal)		6
        (Seychelles)		14
        (Singala)		5
        (Sibérie)		2
        (Soudan)		7
        (Sainte-Hélène)		22
        (Sumatra)		10
        (Terre-Neuve)		16
        (Texas)			0
        (Venezuela)		8
        (Virginia)		1
        (Yakoutie)		2
        (Yucatán)		8
    >> def
    /provind [
        [(img:indigene00) 0  0 0.5]% Indien apache
        [(img:indigene01) 8  0 0.5]% Indien iroquois
        [(img:indigene02) 0  0 0.5]% Mongol
        [(img:indigene03) 0  3 0.5]% Japonais
        [(img:indigene04) 0  0 0.5]% Chinois
        [(img:indigene05) 0  3 0.5]% Hindou
        [(img:indigene06) 3  0 0.5]% Zoulou
        [(img:indigene07) 3  0 0.5]% Mamelouk
        [(img:indigene08) 0  5 0.5]% Brésilien
        [(img:indigene09) 4  0 0.5]% Perse
        [(img:indigene10) 0  4 0.5]% Oceanie
        [(img:indigene11) 3  0 0.5]% Azteque
        [(img:indigene12) 1  0 0.5]% Inca
        [(img:indigene13) 0  4 0.5]% Mapuche
        [(img:indigene14) 0 10 0.5]% Poissons
        [(img:indigene15) 0  0 0.5]% Indochine
        [(img:indigene16) 0  5 0.5]% Baleines
        [(img:indigene17) 0 15 0.5]% Kangourous
        [(img:indigene18)10  0 0.5]% Indien pacifique
        [(img:indigene19) 0  6 0.5]% Ours polaires
        [(img:indigene20)10  0 0.5]% Indiens du nord
        [(img:indigene21) 9  0 0.5]% Caribes
        [(img:indigene22) 9  0 0.5]% Napoleons
        [(img:indigene23) 8  0 0.5]% Masai
    ] def
    /provincepens <<
        100 (1 1 1)
          1 (1 1 0)
        110 (0 0 0)
          0 (1 1 0)
        111 (0 0 0)
         60 (1 1 1)
        101 (0 0 0)
         11 (0 0 0)
        333 (1 1 1)
        448 (1 1 1)
        255 (1 1 0)
    >> def
    /provinceindigene {% x y => ---
        /provimy exch def
        /provimx exch def
        provind provheader 0 get get aload pop
        /provimscale exch def
        /provimxx exch def
        /provimyy exch def
        /provimname exch def
        provimscale provimx provimxx add provimy provimyy add
        pstack begints provimname useimage endts
    } bd
    /provinceframe {
        /supwidth exch def
        %0.5 beginalpha
	provpen out( RG )out provcolor{display space}forall(rg\n)out
	provx display space
	provy provheight sub display space provwidth supwidth add display
	space provheight display ( re f\n) out
        %endalpha
        (0 0 0 RG 0 0 0 rg 1 w\n)out
        0 40 provheight 1 sub { % pstack (----) print
            provx display space provy exch sub 40 sub display space
            provwidth display space 40 display (re S\n)out
        } for
        provpen out( RG )out provpen out( rg\n) out
%        /provpoints [provx provy provht sub provwidth supwidth add provht] def
    } bd
    /provsetup { % minimal width => ---
        /provmax exch def
        /provcolor namesdict provcode get def
        /provcolorcode provcolor aload pop 10 mul exch 100 mul add exch 1000 mul add def
        /provpen (1 0 0) 
        provincepens provcolorcode known {pop provincepens provcolorcode get}if def
        /provname [
	    suffixdisplaynamedict provcode known {
                provcode suffixdisplaynamedict provcode get !
            }{
                replacedisplaynamedict provcode known {
                    replacedisplaynamedict provcode get
                }{provcode}ifelse
            }ifelse
            {(\n)search{exch pop exch}{exit}ifelse}loop
        ] def
        /provresources [
            [/orient /epices /america /sucre /sucrebr /peche /peaux /soie /cotonas /coton /esclaves /bois /areacold] {
                /provres exch def
                resourcesdict provres get dup provcode known {
                    provcode get [ provres 3 -1 roll ]
                }{pop} ifelse
            } forall
        ] def
        /provcarac1 resourcesdict (values) get provcode get def
        /provcarac2 resourcesdict (forces) get provcode get def
        40 (FontArialNarrow-Bold) setbasefont
        /provw0 0 provname {_ stringwidth .max}forall provmax .max def
        40 (FontArialNarrow) setbasefont
        /provw1 provcarac1 _ stringwidth def
        /provw2 provcarac2 _ stringwidth def
        /provw3 60 def
        /provx provheader 1 get def
        /provy provheader 2 get def
    } bd
    /provincev {
        120 provsetup
        /provwidth provw0 [
            provw3 provw1 5 add add
            provw3 provw2 5 add add
            provresources length 0 gt {85} if
        ] {.max} forall 10 add def
        /provheight 80 provres length provname length add 40 mul add def
        0 provinceframe
        /decy 40 def
        provname {provx provwidth 2 div add provy decy sub provmax 40
        (FontArialNarrow-Bold) centertext /decy decy 40 add def}forall
        /decy decy 40 add def
        provx provwidth provw1 provw2 .max provw3 15 add add sub 2 div add
        provy decy sub provinceindigene
    } bd

    indigenesdict {
        /provheader exch def
        /provcode exch 30 string cvs def
        provheader 3 get {provinceh}{provincev}ifelse
    } forall
} if % Ressources
endpage
enddocument
finishtrace
