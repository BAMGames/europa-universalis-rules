(define (list-int z) (if (= 0 z) '(0) (cons z (list-int (- z 1)))))
(define (find-layer-by-name img str)
  (let* ((layers (gimp-image-get-layers img))
	 (names
	  (mapcar
	   (lambda (x)
	     (car (gimp-drawable-get-name
		   (aref (cadr layers) x)
		   )
		  ))
	   (list-int (- (car layers) 1))
	   )
	  )
	 (position (- (length (member str names)) 1))
	 )
    (aref (cadr layers) position)
    )
  )
(define (copypaste-layer-by-name imgfrom layerinto str complement)
  (let* ((finalname (string-append complement str))
	 (layercopied (find-layer-by-name imgfrom str))
	 (floatingsel (car (if (car (gimp-edit-copy layercopied)) (gimp-edit-paste layerinto 1) '())))
	 )
    (gimp-floating-sel-to-layer floatingsel)
    (gimp-drawable-set-name floatingsel finalname)
    (gimp-layer-set-mode floatingsel (car (gimp-layer-get-mode layercopied)))
    )
  )

(define (makeshield arg)
  (let* (
         (stringinput (string-append "blasons/src/shield_" arg))
         (stringoutput (string-append "blasons/shield_" arg))
         (modeldir "blasons/templates/")
	 (pgmsource (string-append modeldir "blason.pgm"))
         (modelsource (string-append modeldir "modele.xcf"))
         (filename0 (string-append stringinput ".xcf"))
	 (model (car (gimp-file-load 1 modelsource modelsource)))
	 (img (car (gimp-file-load 1 filename0 filename0)))
	 (religion (car (gimp-drawable-get-name (aref (cadr (gimp-image-get-layers img)) 0))))
	 (layer (if (> (car (gimp-image-get-layers img)) 1) (car(gimp-image-merge-visible-layers img EXPAND-AS-NECESSARY)) '()))
	 (flatlayer (car (gimp-image-flatten img)))
	 (img2 (car (gimp-file-load 1 pgmsource pgmsource)))
	 (filenamepng (string-append stringoutput ".png"))
	 (filenamepnm (string-append stringoutput ".pnm"))
	 )
    (copypaste-layer-by-name model flatlayer "embossing" "")
    (copypaste-layer-by-name model flatlayer "screening" "")
    (copypaste-layer-by-name model flatlayer religion "religion-")
    (copypaste-layer-by-name model flatlayer "frametop" "")
    (copypaste-layer-by-name model flatlayer "genericmask" "")
    (set! flatlayer (car (gimp-image-flatten img)))
    (file-pnm-save 1 img flatlayer filenamepnm filenamepnm 1)
    (gimp-layer-add-alpha flatlayer)
    (let* (

	   (backgroundlayer (car (gimp-layer-copy flatlayer FALSE)))
	   (mask (car (gimp-layer-create-mask flatlayer ADD-WHITE-MASK)))
	   (carbonlayer (car (gimp-image-flatten img2)))
	   )
      (gimp-selection-all img)
      (gimp-image-add-layer img backgroundlayer 0)
      (gimp-edit-fill backgroundlayer BACKGROUND-FILL)
      (gimp-selection-none img)
      (gimp-layer-add-mask flatlayer mask)
      (gimp-selection-all img2)
      (gimp-edit-copy carbonlayer)
      (gimp-floating-sel-anchor (car (gimp-edit-paste mask FALSE)))
      (gimp-layer-remove-mask flatlayer FALSE)
      (gimp-image-raise-layer-to-top img flatlayer)
      (let
	  (
	   (newlayer (car(gimp-image-merge-visible-layers img EXPAND-AS-NECESSARY)))
	   )
	(file-png-save 1 img newlayer filenamepng filenamepng 0 9 0 0 0 1 1)
        )
      )
    )
  )
