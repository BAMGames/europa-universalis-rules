#!/bin/sh
set -e

resol=800
xname=bitmap
zoom_level=8
minzoomlevel=0
TARGETDIR="carte/bitmapgen"
MODE=${1:-"simple_color"}

# 8425 5840
BTSIZE=9102   # pixels units of bigtiles
BTENSIZE=9472
SIZE=2048     # postscript units of bigtiles
CUTOFFMAPS=3  # number of bigtiles vertically for one map
CUTOFFY=6     # double of the preceding
CUTOFFX=5     # number of bigtiles horizontally for one map

PZX=13568      # Origin of Europe map X in absolute pixels
PZY=6144     # Origin of Europe map X in absolute pixels

say() {
    echo "${SPECIALPREFIX}$@" 1>&2
}

sumit() {
    MDSUM=$(md5sum "$1")
    MDSUM=${MDSUM%% *}
}

sizeit() {
    CKSIZE=$(stat -c %s "$1")
}

crushit() {
    if [ -L "${1}" ]; then
        return
    fi
    mv "${1}" "${1%.png}X.png"
    pngcrush -rem bKGD -rem tEXt -rem pHYs -q -force "${1%.png}X.png" "${1}"
    rm -f "${1%.png}X.png"
    sumit "$1"
    if [ "$MDSUM" = "$SPECIALMDSUM" ]; then
        rm -f "$1"
        ln -s "$BLANK" "$1"
    fi
}

generate_blank() {
    mkdir -p ${TARGETDIR}/blank
    if [ ! -e ${TARGETDIR}/blank/${1}x${2}.png ]; then
        convert -size ${1}x${2} canvas:white PNG32:${TARGETDIR}/blank/${1}x${2}.png
    fi
}

generate_crop() {
    local xa
    local xb
    local xxa
    local xxb
    local xxxa
    local xxxb
    xa="$2";xb="$3"
    xxa=$((SIZE*xa-1));xxb=$((SIZE*xb-1))
    xxxa=$((SIZE*xa+SIZE+1));xxxb=$((SIZE*xb+SIZE+1))
    sed -e '/bboxset/ s/^.*$/'"${xxa} ${xxb} ${xxxa} ${xxxb}"' bboxset/g;s/dopage_rich_color_background/dopage_'"${MODE}"'_background/g' < carte/$1.background.eps > carte/clip.background.eps
    sed -e '/bboxset/ s/^.*$/'"${xxa} ${xxb} ${xxxa} ${xxxb}"' bboxset/g' < carte/$1.eps > carte/clip.eps
    bin/gsexec carte clip.background clip 2> /dev/null
    rm -f plan/in/gs-carte-clip.background.in plan/in/gs-carte-clip.in plan/out/gs-carte-clip.background.out plan/out/gs-carte-clip.out carte/clip.background.clp.ps carte/clip.background.clp carte/clip.eps carte/clip.background.eps
    pdftoppm -singlefile -png -r "$resol" carte/clip.pdf ${TARGETDIR}/tmp/clipORIG
    rm -f carte/clip.pdf
    convert ${TARGETDIR}/tmp/clipORIG.png -crop ${BTSIZE}x${BTSIZE}+5+5 PNG32:${TARGETDIR}/tmp/clip.png
    rm -f ${TARGETDIR}/tmp/clip-1.ppm ${TARGETDIR}/tmp/clipORIG.png
}

generate_bigtile() {
    local tmp
    tname=${TARGETDIR}/bt_$1_$2
    mkdir -p $tname
    if [ -f $tname/big.png ]; then
        true
    elif [ "$1" -ge "$CUTOFFX" ] || [ "$1" -lt "0" ]; then
        generate_blank $BTSIZE $BTSIZE
        ln -s ../blank/${BTSIZE}x${BTSIZE}.png $tname/big.png
        say "warning:bigtile $1,$2 requested"
    elif [ "$2" -ge "$CUTOFFY" ] || [ "$2" -lt "0" ]; then
        generate_blank $BTSIZE $BTSIZE
        ln -s ../blank/${BTSIZE}x${BTSIZE}.png $tname/big.png
        say "warning:bigtile $1,$2 requested"
    elif [ "$2" -lt "$CUTOFFMAPS" ]; then
        say "crop:$1:$2"
        generate_crop europe $1 $2
        mv ${TARGETDIR}/tmp/clip.png $tname/big.png
    else
        tmp=$2
        tmp=$((tmp-CUTOFFMAPS))
        say "crop:$1:$2"
        generate_crop rotw $1 $tmp
        mv ${TARGETDIR}/tmp/clip.png $tname/big.png
    fi
    precut_bigtile "$1" "$2"
}

precut_bigtile() {
    if [ ! -e ${TARGETDIR}/done/cut.$1_$2 ]; then
        say "cut:$1:$2"
        rm -rf $tname.staging $tname.cut
        mkdir -p $tname.staging $tname.cut
        bigtile_to_pixel "$1" "$2"
        # Let X and Y be the absolute pixel coordinates of the lower-left corner of
        # the bigtile : X=i*BTSIZE+PZX, Y=j*BTSIZE+PZY
        # We are going to offset (left and top, because that's the way it is)
        # by Ox and Oy pixels. Ox must be such that (X-Ox)%256=0, and Oy such that
        # (Y+BTSIZE+Oy)%256=0, and the size of the englobing picture must have its
        # upper-left corner be a multiple of 256.
        # The width height could be cut off to BTSIZE+Ox,BTSIZE+Oy
        # Formula: Ox=X%256    Oy=(65536-Y-BTSIZE)%256
        # Once offset, we will cut the bigtile in squares of size 256. Their name
        # will be tile_X_Y, with X or Y being either a multiple of 256 or Ox or Oy
        offsetX=$(( LLPX%256 ))
        offsetY=$(( (65536-LLPY-BTSIZE)%256 ))
        sizeX=$(( BTSIZE+offsetX ))
        sizeY=$(( BTSIZE+offsetY ))
        convert -repage ${sizeX}x${sizeY}+${offsetX}+${offsetY} $tname/big.png PNG32:${TARGETDIR}/tmp/cut.png
        convert ${TARGETDIR}/tmp/cut.png -crop 256x256 -set filename:tile "%[fx:page.x]_%[fx:page.y]" +repage +adjoin "PNG32:$tname.staging/tile_%[filename:tile].png"
        rm -f ${TARGETDIR}/tmp/cut.png
        leftmost=$(( LLPX-offsetX ))
        topmost=$(( LLPY+BTSIZE+offsetY-256 ))
        for LX in $offsetX $(seq 256 256 $((sizeX-1 )) ); do
            if [ "$LX" = "$offsetX" ]; then
                KX=0
            else
                KX=$LX
            fi
            for LY in $offsetY $(seq 256 256 $((sizeY-1)) ); do
                if [ "$LY" = "$offsetY" ]; then
                    KY=0
                else
                    KY=$LY
                fi
                if [ -f $tname.staging/tile_${LX}_${LY}.png ]; then
                    mv $tname.staging/tile_${LX}_${LY}.png $tname.cut/tile_$((leftmost+KX))_$((topmost-KY)).png
                else
                    echo "Failed: $LX $LY"
                    exit 1
                fi
            done
        done
        if [ $(find $tname.staging -type f|wc -l) -lt 1 ]; then
            rmdir $tname.staging
            touch ${TARGETDIR}/done/cut.$1_$2
        else
            echo "Failed: $tname.staging"
            find $tname.staging
            exit 1
        fi
    fi
    if [ ! -f ${TARGETDIR}/done/crushed.$1_$2 ]; then
        say "crush:$1:$2"
        for a in $(find $tname.cut -type f); do crushit $a; done
        touch ${TARGETDIR}/done/crushed.$1_$2
    fi
}

bigtile_to_pixel() {
    local xx=$1
    local yy=$2
    LLPX=$((PZX+BTSIZE*xx))
    LLPY=$((PZY+BTSIZE*yy))
}

pixel_to_bigtile() {
    local xx=$1
    local yy=$2
    BTX=$(( (xx-PZX)/BTSIZE ))
    BTY=$(( (yy-PZY)/BTSIZE ))
    BTLX=$(( (xx-PZX)-BTSIZE*BTX ))
    BTLY=$(( (yy-PZY)-BTSIZE*BTY ))
    if [ $BTLX -lt 0 ]; then
        BTX=$((BTX-1))
        BTLX=$((BTLX+BTSIZE))
    fi
    if [ $BTLY -lt 0 ]; then
        BTY=$((BTY-1))
        BTLY=$((BTLY+BTSIZE))
    fi
}

tile_to_bigtile() {
    local xx=$1 # Tile number (x)
    local yy=$2 # Tile number (y)
    ACX=$(( xx*256 ))
    ACY=$(( yy*256 ))
    pixel_to_bigtile $ACX $ACY
    LLBTX=$BTX;LLBTY=$BTY;LLBTLX=$BTLX;LLBTLY=$BTLY
    local ACCX=$((ACX+255))
    local ACCY=$((ACY+255))
    pixel_to_bigtile $ACCX $ACCY
    URBTX=$BTX;URBTY=$BTY;URBTLX=$BTLX;URBTLY=$BTLY
}

blank_tile() {
    NX=$2;NY=$3;ACX=$4;ACY=$5
    bigtile_to_pixel $NX $NY
    local stxmin=$ACX
    local stxmax=$((ACX+256))
    local btxmin=$LLPX
    local btxmax=$((LLPX+BTSIZE))
    local xmin=$stxmin
    local xmax=$stxmax
    if [ "$xmin" -lt "$btxmin" ]; then
        xmin=$btxmin
    fi
    if [ "$xmax" -gt "$btxmax" ]; then
        xmax=$btxmax
    fi
    local stymin=$ACY
    local stymax=$((ACY+256))
    local btymin=$LLPY
    local btymax=$((LLPY+BTSIZE))
    local ymin=$stymin
    local ymax=$stymax
    if [ "$ymin" -lt "$btymin" ]; then
        ymin=$btymin
    fi
    if [ "$ymax" -gt "$btymax" ]; then
        ymax=$btymax
    fi
    generate_blank $((xmax-xmin)) $((ymax-ymin))
    local dd=${1%/*}
    [ -d "$dd" ] || mkdir -p $dd
    ln -s ../blank/$((xmax-xmin))x$((ymax-ymin)).png $1
}

generate_tile() {
    local stname=${TARGETDIR}/tile_${zoom_level}/$1_$2.png
    local tname
    local tnamea
    local tnameb
    local tnamec
    if [ -e "$stname" ]; then
        return
    fi
    tile_to_bigtile "$1" "$2"
    if [ "$LLBTX" = "$URBTX" ]; then
        if [ "$LLBTY" = "$URBTY" ]; then
            #echo "Cutting from 1"
            tname=${TARGETDIR}/bt_${LLBTX}_${LLBTY}.cut/tile_${ACX}_${ACY}.png
            if [ ! -e $tname ]; then
                ln -s $BLANK $stname
            elif [ -L $tname ]; then
                ln -s $BLANK $stname
            else
                cp ${tname} ${stname}
            fi
        else
            #echo "Cutting from 2 vertical $LLBTX $LLBTY => $URBTX $URBTY"
            tname=${TARGETDIR}/bt_${LLBTX}_${LLBTY}.cut/tile_${ACX}_${ACY}.png
            tnamea=${TARGETDIR}/bt_${URBTX}_${URBTY}.cut/tile_${ACX}_${ACY}.png
            if [ ! -e $tname ]; then blank_tile $tname $LLBTX $LLBTY $ACX $ACY; fi
            if [ ! -e $tnamea ]; then blank_tile $tnamea $URBTX $URBTY $ACX $ACY; fi
            convert $tnamea $tname -append PNG32:$stname
            crushit $stname
        fi
    else 
        if [ "$LLBTY" = "$URBTY" ]; then
            #echo "Cutting from 2 horizontal $LLBTX $LLBTY => $URBTX $URBTY"
            tname=${TARGETDIR}/bt_${LLBTX}_${LLBTY}.cut/tile_${ACX}_${ACY}.png
            tnamea=${TARGETDIR}/bt_${URBTX}_${URBTY}.cut/tile_${ACX}_${ACY}.png
            if [ ! -e $tname ]; then blank_tile $tname $LLBTX $LLBTY $ACX $ACY; fi
            if [ ! -e $tnamea ]; then blank_tile $tnamea $URBTX $URBTY $ACX $ACY; fi
            convert $tname $tnamea +append PNG32:$stname
            crushit $stname
        else
            #echo "Cutting from 4 across $LLBTX $LLBTY => $URBTX $URBTY"
            tname=${TARGETDIR}/bt_${LLBTX}_${LLBTY}.cut/tile_${ACX}_${ACY}.png
            tnamea=${TARGETDIR}/bt_${LLBTX}_${URBTY}.cut/tile_${ACX}_${ACY}.png
            tnameb=${TARGETDIR}/bt_${URBTX}_${LLBTY}.cut/tile_${ACX}_${ACY}.png
            tnamec=${TARGETDIR}/bt_${URBTX}_${URBTY}.cut/tile_${ACX}_${ACY}.png
            if [ ! -e $tname ]; then blank_tile $tname $LLBTX $LLBTY $ACX $ACY; fi
            if [ ! -e $tnamea ]; then blank_tile $tnamea $LLBTX $URBTY $ACX $ACY; fi
            if [ ! -e $tnameb ]; then blank_tile $tnameb $URBTX $LLBTY $ACX $ACY; fi
            if [ ! -e $tnamec ]; then blank_tile $tnamec $URBTX $URBTY $ACX $ACY; fi
            convert \( $tnamea $tnamec +append \) \( $tname $tnameb +append \) -append -resize 256x256 PNG32:$stname
            crushit $stname
        fi
    fi
}

warmup() {
    if [ ! -f .tmp/debug-bitmapgen ]; then
        rm -rf ${TARGETDIR}
    fi
    rm -rf ${TARGETDIR}/tmp
    mkdir -p ${TARGETDIR}/tmp
    mkdir -p ${TARGETDIR}/done
    mkdir -p ${TARGETDIR}/blank
}

unzoom() {
    for z in $(seq $((zoom_level-1)) -1 0); do
        if [ ! -e ${TARGETDIR}/done/zoom.$z ]; then
            rm -rf ${TARGETDIR}/tile_${z}
            mkdir -p ${TARGETDIR}/tile_${z}
            val=1
            for zz in $(seq 1 1 $z); do
                val=$((val*2))
            done
            val=$((val-1))
            local zzz=$((z+1))
            for i in $(seq 0 $val); do
                if [ "$((i%4))" = 0 ]; then say "zoom:${z}:$i"; fi
                local iia=$((2*i))
                local iib=$((2*i+1))
                for j in $(seq 0 $val); do
                    local jja=$((2*j))
                    local jjb=$((2*j+1))
                    tname=${TARGETDIR}/tile_${z}/${i}_${j}.png
                    tnamea=${TARGETDIR}/tile_${zzz}/${iia}_${jjb}.png
                    tnameb=${TARGETDIR}/tile_${zzz}/${iib}_${jjb}.png
                    tnamec=${TARGETDIR}/tile_${zzz}/${iia}_${jja}.png
                    tnamed=${TARGETDIR}/tile_${zzz}/${iib}_${jja}.png
                    if [ -L $tnamea ]&&[  -L $tnameb ]&&[  -L $tnamec ]&&[  -L $tnamed ]; then
                        ln -s ../blank/256x256.png $tname
                    else
                        convert \( $tnamea $tnameb +append \) \( $tnamec $tnamed +append \) -append -resize 256x256 PNG32:$tname
                        crushit $tname
                    fi
                done
            done
            touch ${TARGETDIR}/done/zoom.$z
        fi
    done
}

manifest() {
    MANIFEST=${TARGETDIR}/manifest.txt
    if [ ! -f ${TARGETDIR}/done/manifest ]; then
        rm -rf $MANIFEST
        sumit "${TARGETDIR}/blank/256x256.png"
        sizeit "${TARGETDIR}/blank/256x256.png"
        echo "$MDSUM Z $CKSIZE blank/256x256.png" >> $MANIFEST
        for z in $(seq $zoom_level -1 0); do
            val=1
            for zz in $(seq 1 1 $z); do
                val=$((val*2))
            done
            val=$((val-1))
            for i in $(seq 0 1 $val); do
                say "manifest:$z:$i"
                for j in $(seq 0 1 $val); do
                    stname=${TARGETDIR}/tile_${z}/${i}_${j}.png
                    if [ -L $stname ]; then
                        echo "$SPECIALMDSUM Z $BLANK tile_${z}/${i}_${j}.png" >> $MANIFEST
                    else
                        sumit $stname
                        sizeit $stname
                        echo "$MDSUM Z $CKSIZE tile_${z}/${i}_${j}.png" >> $MANIFEST
                    fi
                done
            done
        done
        mv $MANIFEST $MANIFEST.unsorted
        cat $MANIFEST.unsorted|LC_ALL=C sort -u -k 4 > $MANIFEST
        bzip2 -9 -k $MANIFEST
        touch ${TARGETDIR}/done/manifest
    fi
}

generate_tiles() {
    if [ ! -f ${TARGETDIR}/done/tiles ]; then
        mkdir -p ${TARGETDIR}/tile_${zoom_level}
        for i in $(seq 0 255); do
            if [ "$((i%32))" = 0 ]; then say "copy:$i"; fi
            for j in $(seq 0 255); do
                generate_tile $i $j
            done
        done
        touch ${TARGETDIR}/done/tiles
    fi
}

main() {
    warmup
    generate_blank 256 256
    SPECIALMDSUM="0"
    crushit ${TARGETDIR}/blank/256x256.png
    SPECIALMDSUM="$MDSUM"
    BLANK=../blank/256x256.png
    
    # Generate all colourfull tiles from bigtiles done/cut_* done/crushed_*
    for i in $(seq 0 $((CUTOFFX-1)) ); do
        for j in $(seq 0 $((CUTOFFY-1)) ); do
            generate_bigtile $i $j
        done
    done
    rmdir ${TARGETDIR}/tmp

    # Use the precuts and fill in with blanks
    generate_tiles
    # Unzoom and manifest done/zoom_* done/manifest
    unzoom
    manifest
    say "copy"
    rm -rf carte/bitmap
    mkdir -p carte/bitmap/blank
    cp -r ${TARGETDIR}/blank/256x256.png carte/bitmap/blank/
    for z in $(seq $zoom_level -1 0); do
        cp -r ${TARGETDIR}/tile_${z} carte/bitmap/
    done
    cp $MANIFEST.bz2 carte/
    if [ ! -f .tmp/debug-bitmapgen ]; then
        rm -rf ${TARGETDIR}
    fi
}

main
# zip2 -9 -k ${TARGETDIR}/manifest.txt
# mv ${TARGETDIR}/manifest.txt.bz2 carte/manifest.txt.bz2
# rm -rf carte/bitmap
# mv ${TARGETDIR}/bitmap carte/bitmap
# if [ ! -f .tmp/debug-bitmapgen ]; then
#     rm -rf ${TARGETDIR}
# fi
exit 0
